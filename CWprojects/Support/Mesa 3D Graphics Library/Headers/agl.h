/* 2.3 1997-06-17 */#ifndef _AGL_H#define _AGL_H/*** Copyright 1994-1997, Conix Graphics.** All Rights Reserved.**** Conix Graphics** www.conix3d.com*/#ifdef __cplusplusextern "C" {#endif#ifndef __QUICKDRAW__#include "quickdraw.h"#endif /* __QUICKDRAW__ */#include <gl.h>#if PRAGMA_IMPORT_SUPPORTED#pragma import on#endif#pragma enumsalwaysint on/*** AGL resources.*/typedef CGrafPtr  AGLPixmap;typedef CGrafPtr  AGLDrawable;/*** AGL opaque data.*/typedef struct __GLpixelfmtRec *AGLPixelFmt;typedef struct __AGLContextRec *AGLContext;/*** Names for attributes to aglGetConfig.*/#define AGL_NONE                0#define AGL_USE_GL              1   /* support AGL rendering          */#define AGL_BUFFER_SIZE         2   /* depth of the color buffer      */#define AGL_LEVEL               3   /* level in plane stacking        */#define AGL_RGBA                4   /* true if RGBA mode              */#define AGL_DOUBLEBUFFER        5   /* double buffering supported     */#define AGL_STEREO              6   /* stereo buffering supported     */#define AGL_AUX_BUFFERS         7   /* number of aux buffers          */#define AGL_RED_SIZE            8   /* number of red component bits   */#define AGL_GREEN_SIZE          9   /* number of green component bits */#define AGL_BLUE_SIZE           10  /* number of blue component bits  */#define AGL_ALPHA_SIZE          11  /* number of alpha component bits */#define AGL_DEPTH_SIZE          12  /* number of depth bits           */#define AGL_STENCIL_SIZE        13  /* number of stencil bits         */#define AGL_ACCUM_RED_SIZE      14  /* number of red accum bits       */#define AGL_ACCUM_GREEN_SIZE    15  /* number of green accum bits     */#define AGL_ACCUM_BLUE_SIZE     16  /* number of blue accum bits      */#define AGL_ACCUM_ALPHA_SIZE    17  /* number of alpha accum bits     *//*** Names for rendering options to aglSetOptions.*/#define AGL_CURSOR_BLANKING        1   /* Enable cursor blanking during swaps          */#define AGL_DISPLAY_TRACKING       2   /* Enable color depth to track default display  */#define AGL_SWAP_HINT              4   /* Enable swap buffer hint rect                 *//*** Error return values from aglGetError.*/#define AGL_NO_ERROR                 0 /* No error                      */#define AGL_BAD_ATTRIBUTE        10000 /* unknown attribute to get/set  */#define AGL_BAD_PIXELFMT         10001 /* invalid pixfmt specified      */#define AGL_BAD_CONTEXT          10002 /* invalid context specified     */#define AGL_BAD_DRAWABLE         10003 /* invalid drawable specified    */#define AGL_INVALID_GDEV         10004 /* invalid GDevice for attribute */#define AGL_INVALID_OPERATION    10005 /* invalid operation             */#define AGL_GL_ERROR             10006 /* GL error occurred             *//************************************************************************/extern AGLPixelFmt aglChoosePixelFmt(GDHandle *dev, int ndev, int *attribs);extern int aglListPixelFmts(GDHandle dev, AGLPixelFmt *fmts);extern GLboolean aglCopyContext(AGLContext src, AGLContext dst, GLuint mask);extern AGLContext aglCreateContext(AGLPixelFmt pix, AGLContext shareList);extern GLboolean aglDestroyContext(AGLContext ctx);extern GLboolean aglGetConfig(AGLPixelFmt pix, int attrib, int *value);extern AGLContext aglGetCurrentContext(void);extern AGLDrawable aglGetCurrentDrawable(void);extern GLboolean aglMakeCurrent(AGLDrawable drawable, AGLContext ctx);extern GLboolean aglQueryVersion(int *major, int *minor);extern GLboolean aglSetOptions(int opts);extern GLboolean aglSwapBuffers(void);extern GLboolean aglSwapHint(int x, int y, int width, int height);extern GLboolean aglUpdateCurrent(void);extern GLboolean aglUseFont(int fontID, Style face, int size, int first, int count, int listBase);extern GLenum aglGetError(void);#if PRAGMA_IMPORT_SUPPORTED#pragma import off#endif#pragma enumsalwaysint reset#ifdef __cplusplus}#endif#endif